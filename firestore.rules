rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isAuthenticated() {
      return request.auth != null;
    }
    function isUser() {
      return isAuthenticated() && request.auth.token.role == 'user';
    }
    function isCounselor() {
      return isAuthenticated() && request.auth.token.role == 'counselor';
    }
    function isOwner(uid) {
      return isAuthenticated() && request.auth.uid == uid;
    }
    function isAdmin() {
      return isAuthenticated() && (
        request.auth.token.role == 'admin' || 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true
      );
    }

    // User profiles
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Counselor profiles
    match /counselors/{counselorId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == counselorId;
    }
    
    // Chat messages
    match /chats/{chatId} {
      allow read: if request.auth != null && 
        (resource.data.userId == request.auth.uid || 
         resource.data.counselorId == request.auth.uid);
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && 
        (resource.data.userId == request.auth.uid || 
         resource.data.counselorId == request.auth.uid);
    }
    
    // Wallet transactions
    match /transactions/{transactionId} {
      allow read: if request.auth != null && 
        (resource.data.userId == request.auth.uid || 
         resource.data.counselorId == request.auth.uid);
      allow create: if request.auth != null;
      allow update, delete: if false; // Transactions cannot be modified
    }
    
    // Appointments
    match /appointments/{appointmentId} {
      allow read: if request.auth != null && 
        (resource.data.userId == request.auth.uid || 
         resource.data.counselorId == request.auth.uid);
      allow create: if request.auth != null;
      allow update: if request.auth != null && 
        (resource.data.userId == request.auth.uid || 
         resource.data.counselorId == request.auth.uid);
      allow delete: if false; // Appointments cannot be deleted
    }

    // Sessions collection
    match /sessions/{sessionId} {
      allow read: if isOwner(resource.data.userId) ||
        (isCounselor() && resource.data.counselorId == request.auth.uid);
      allow create: if isCounselor() && request.resource.data.counselorId == request.auth.uid;
      allow update: if isCounselor() && resource.data.counselorId == request.auth.uid;
      allow delete: if false;
    }

    // Payments collection
    match /payments/{paymentId} {
      allow read: if isOwner(resource.data.userId);
      allow create: if isOwner(request.resource.data.userId);
      allow update: if false;
      allow delete: if false;
    }

    // Chats and messages
    match /chats/{chatId} {
      allow read: if isAuthenticated() && resource.data.participants.hasAny([request.auth.uid]);
      allow create: if false;
      allow update: if false;
      allow delete: if false;
      match /messages/{messageId} {
        allow read: if isAuthenticated() &&
          get(/databases/$(database)/documents/chats/$(chatId)).data.participants.hasAny([request.auth.uid]);
        allow create: if isAuthenticated() &&
          get(/databases/$(database)/documents/chats/$(chatId)).data.participants.hasAny([request.auth.uid]) &&
          request.resource.data.senderId == request.auth.uid &&
          request.resource.data.content is string &&
          request.resource.data.timestamp is timestamp;
        allow update, delete: if false;
      }
    }

    // Allow users to read and write their own tasks
    match /tasks/{taskId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    // Allow users to read and write their own notes
    match /notes/{noteId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    // Allow users to read and write their own mood entries
    match /mood_entries/{entryId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
    }
  }
} 