rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

test "Users can read any user profile" {
  function authenticated() {
    return request.auth != null;
  }
  
  function isUser() {
    return authenticated() && 
      get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'user';
  }
  
  let user = {
    uid: "user123",
    role: "user"
  };
  
  let otherUser = {
    uid: "otherUser",
    role: "user"
  };
  
  let userDoc = {
    data: {
      name: "John Doe",
      age: 25,
      gender: "Male",
      email: "john@example.com",
      walletBalance: 1000.0
    }
  };
  
  let request = {
    auth: user
  };
  
  let resource = userDoc;
  
  assert allow read: if authenticated();
}

test "Users can only update their own profile with allowed fields" {
  function authenticated() {
    return request.auth != null;
  }
  
  function isOwner(userId) {
    return authenticated() && request.auth.uid == userId;
  }
  
  let user = {
    uid: "user123",
    role: "user"
  };
  
  let userDoc = {
    data: {
      name: "John Doe",
      age: 25,
      gender: "Male",
      email: "john@example.com",
      walletBalance: 1000.0
    }
  };
  
  let request = {
    auth: user,
    resource: {
      data: {
        name: "New Name",
        age: 30,
        gender: "Male",
        email: "new@email.com",
        walletBalance: 1500.0
      }
    }
  };
  
  let resource = userDoc;
  
  assert allow update: if isOwner("user123") && 
    request.resource.data.diff(resource.data).affectedKeys()
      .hasOnly(['name', 'age', 'gender', 'email', 'walletBalance']);
}

test "Users cannot update other users profiles" {
  function authenticated() {
    return request.auth != null;
  }
  
  function isOwner(userId) {
    return authenticated() && request.auth.uid == userId;
  }
  
  let user = {
    uid: "user123",
    role: "user"
  };
  
  let otherUserDoc = {
    data: {
      name: "Jane Doe",
      age: 30,
      gender: "Female",
      email: "jane@example.com",
      walletBalance: 2000.0
    }
  };
  
  let request = {
    auth: user,
    resource: {
      data: {
        name: "New Name"
      }
    }
  };
  
  let resource = otherUserDoc;
  
  assert deny update: if !isOwner("otherUser");
}

test "Counselors can read all appointments" {
  function authenticated() {
    return request.auth != null;
  }
  
  function isCounselor() {
    return authenticated() && 
      get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'counselor';
  }
  
  let counselor = {
    uid: "counselor1",
    role: "counselor"
  };
  
  let appointmentDoc = {
    data: {
      userId: "user123",
      counselorId: "counselor1",
      status: "scheduled",
      notes: "Test appointment"
    }
  };
  
  let request = {
    auth: counselor
  };
  
  let resource = appointmentDoc;
  
  assert allow read: if isCounselor();
}

test "Users can create appointments" {
  function authenticated() {
    return request.auth != null;
  }
  
  function isUser() {
    return authenticated() && 
      get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'user';
  }
  
  let user = {
    uid: "user123",
    role: "user"
  };
  
  let request = {
    auth: user,
    resource: {
      data: {
        userId: "user123",
        counselorId: "counselor1",
        status: "scheduled",
        notes: "New appointment"
      }
    }
  };
  
  assert allow create: if isUser() && 
    request.resource.data.userId == request.auth.uid;
} 